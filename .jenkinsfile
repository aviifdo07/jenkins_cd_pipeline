pipeline {
    agent any

    environment {
        // MAVEN_HOME = tool name: 'Maven', type: 'maven'
        // JDK_HOME = tool name: 'JDK', type: 'jdk'
        // AWS_DEFAULT_REGION = 'your-aws-region'  // Replace with your AWS region
        // AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        // AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        EMAIL_RECIPIENTS = 'adithyashanilka200101704398@gmail.com'  // Specify the email address to receive notifications
    }

    stages {
        stage('Build') {
            steps {
                echo 'mvn clean install'
                echo 'Building the code using Maven...'
                // sh 'mvn clean install'
                sleep(time: 10, unit: 'SECONDS')
            }
        }

        stage('Unit and Integration Tests') {
            steps {
                echo 'mvn test'
                echo 'Running unit and integration tests...'
                // sh 'mvn test'
                sleep(time: 5, unit: 'SECONDS')
            }
            post {
                success {
                    echo 'Unit and integration tests passed successfully.'
                    sendNotification('Unit and integration tests', 'SUCCESS')
                }
                failure {
                    echo 'Unit and integration tests failed.'
                    sendNotification('Unit and integration tests', 'FAILURE')
                }
            }
        }

        stage('Code Analysis') {
            steps {
                echo 'sonar-scanner'
                echo 'Running code analysis...'
                // Integrate a code analysis tool to analyze your code quality
                // For example, use SonarQube with SonarScanner
                // This requires SonarQube server configuration in Jenkins
                // Example command: sonar-scanner
                // sh 'sonar-scanner'
                sleep(time: 5, unit: 'SECONDS')
            }
        }

        stage('Security Scan') {
            steps {
                echo 'dependency-check.sh'
                echo 'Running security scan...'
                // Perform security scan using a tool like OWASP Dependency-Check
                // Example command: dependency-check.sh
                // sh 'dependency-check.sh'
                sleep(time: 10, unit: 'SECONDS')
            }
            post {
                success {
                    echo 'Security scan passed successfully.'
                    sendNotification('Security Scan', 'SUCCESS')
                }
                failure {
                    echo 'Security scan failed.'
                    sendNotification('Security Scan', 'FAILURE')
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                echo 'aws deploy-to-ec2.sh'
                echo 'Deploying the application to staging server...'
                // Example: AWS EC2 deployment
                // Example command: aws deploy-to-ec2.sh
                // sh 'aws deploy-to-ec2.sh'
                sleep(time: 10, unit: 'SECONDS')
            }
        }

        stage('Integration Tests on Staging') {
            steps {
                echo 'mvn integration-test'
                echo 'Running integration tests on staging environment...'
                // Example: Selenium for UI testing
                // Example command: mvn integration-test
                // sh 'mvn integration-test'
                sleep(time: 5, unit: 'SECONDS')
            }
        }

        stage('Deploy to Production') {
            steps {
                echo 'aws deploy-to-ec2.sh'
                echo 'Deploying the application to production server...'
                // Example: AWS EC2 deployment
                // Example command: aws deploy-to-ec2.sh
                // sh 'aws deploy-to-ec2.sh'
                sleep(time: 10, unit: 'SECONDS')
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution finished'
        }
    }
}

// Function to send notification email
def sendNotification(String stageName, String status) {
    def subject = "${stageName} ${status}: Job ${env.JOB_NAME} #${env.BUILD_NUMBER}"
    def body = """
                Build Status: ${status}
                Project: ${env.JOB_NAME}
                Build Number: ${env.BUILD_NUMBER}
                Build URL: ${env.BUILD_URL}
                Stage: ${stageName}
                """

    // Create a log file and attach it to the email
    def logFile = "${env.BUILD_ID}.log"
    writeFile file: logFile, text: "${body}"

    mail to: "${EMAIL_RECIPIENTS}",
            subject: subject,
            body: body,
            mimeType: 'text/plain',
            attachmentsPattern: '**/*',
            attachments: logFile
}
